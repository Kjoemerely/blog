<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qk.blog.dao.ArticleMapper">
    <resultMap id="BaseResultMap" type="com.qk.blog.model.ArticleModel">
        <!--@mbg.generated-->
        <!--@Table article-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="category_id" jdbcType="BIGINT" property="categoryId"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="create_user_id" jdbcType="BIGINT" property="createUserId"/>
        <result column="create_user_name" jdbcType="VARCHAR" property="createUserName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_user_id" jdbcType="BIGINT" property="updateUserId"/>
        <result column="update_user_name" jdbcType="VARCHAR" property="updateUserName"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id, title, content, category_id, `status`, create_user_id, create_user_name, create_time,
        update_user_id, update_user_name, update_time
    </sql>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated-->
        update article
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="title = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.title,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="content = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.content,jdbcType=LONGVARCHAR}
                </foreach>
            </trim>
            <trim prefix="category_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.categoryId,jdbcType=BIGINT}
                </foreach>
            </trim>
            <trim prefix="`status` = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="create_user_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.createUserId,jdbcType=BIGINT}
                </foreach>
            </trim>
            <trim prefix="create_user_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.createUserName,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="update_user_id = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.updateUserId,jdbcType=BIGINT}
                </foreach>
            </trim>
            <trim prefix="update_user_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.updateUserName,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into article
                (title, content, category_id, `status`, create_user_id, create_user_name, create_time,
                 update_user_id, update_user_name, update_time)
                values
        <foreach collection="list" item="item" separator=",">
            (#{item.title,jdbcType=VARCHAR}, #{item.content,jdbcType=LONGVARCHAR}, #{item.categoryId,jdbcType=BIGINT},
             #{item.status,jdbcType=VARCHAR}, #{item.createUserId,jdbcType=BIGINT},
             #{item.createUserName,jdbcType=VARCHAR},
             #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateUserId,jdbcType=BIGINT},
             #{item.updateUserName,jdbcType=VARCHAR},
             #{item.updateTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>

    <resultMap id="pageMap" type="com.qk.blog.vo.ArticlePageVo" extends="BaseResultMap">
        <result column="category_name" property="categoryName"/>
        <result column="tag_name" property="tagNames"/>
        <result column="commentCount" property="commentCount"/>
    </resultMap>
    <select id="getArticlePage" resultType="com.qk.blog.vo.ArticlePageVo">
        SELECT a.*,
               c.NAME category_name,
               t.NAME,
               IFNULL(cmt.num, 0)
        FROM article a
                     LEFT JOIN category c ON c.id = a.category_id
                     LEFT JOIN (
                SELECT r.article_id,
                       GROUP_CONCAT(t.NAME) name
                FROM tag t
                             LEFT JOIN article_tag_rel r ON r.tag_id = t.id
                GROUP BY r.article_id
                ) t ON t.article_id = a.id
                     LEFT JOIN (SELECT article_id, count(*) num from COMMENT GROUP BY article_id) cmt
                ON cmt.article_id = a.id
                WHERE a.status = 'NORMAL'
        <if test="searchValue != null and searchValue != ''">
            and a.title like concat('%', #{searchValue,jdbcType=VARCHAR}, '%')
        </if>
    </select>
</mapper>